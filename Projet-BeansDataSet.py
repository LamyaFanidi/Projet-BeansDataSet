import streamlit as st
from PIL import Image
import pandas as pd
import seaborn as sns
import scipy as sp
from matplotlib import pyplot as plt


st.markdown(
    """
    <div style='text-align:center'>
    <h1>Statistique descriptive et Analyse des ventes â˜•</h1>
    </div><br>
    """, unsafe_allow_html=True
)


fichier = 'data/BeansDataSet.csv'
try:
    data = pd.read_csv(fichier)
except Exception as e:
    st.error(f"Erreur lors du chargement des donnÃ©es : {e}")
    st.stop()

#Convertir les columns numÃ©riques
for col in data.columns:
    if col not in ["Channel", "Region"]:
        data[col] = pd.to_numeric(data[col], errors='coerce')


data.fillna(0, inplace=True)

st.sidebar.title('Menu')
menu = st.sidebar.selectbox('SÃ©lectionnez une option',
                            ['Accueil', 'AperÃ§u des donnÃ©es', 'Visualisation', 'Recommandations','GITHub'])

if menu == 'Accueil':
    st.subheader("Affichage des donnÃ©es des ventes")
    st.dataframe(data)


elif menu == 'AperÃ§u des donnÃ©es':
    st.subheader("ğŸ“Š Statistiques descriptives")
    st.write(data.describe())

    numeric_cols = data.select_dtypes(include=['number'])

    if not numeric_cols.empty:
        # matrice de corrÃ©lation
        correlation_matrix = numeric_cols.corr()

        st.subheader("ğŸ“ˆ Matrice de corrÃ©lation")
        st.write(correlation_matrix)

        # heatmap
        fig, ax = plt.subplots(figsize=(10, 8))
        sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', ax=ax)
        st.pyplot(fig)
    else:
        st.error("Aucune colonne numÃ©rique disponible pour la corrÃ©lation.")

elif menu == 'Visualisation':
    st.subheader("ğŸ“Š Histogrammes des ventes")
    data.hist(bins=20, figsize=(15, 10))
    st.pyplot(plt.gcf())

    st.subheader("ğŸ“ˆ Matrice de corrÃ©lation")
    numeric_cols = data.select_dtypes(include=['number'])
    if not numeric_cols.empty:
        fig, ax_corr = plt.subplots(figsize=(10, 10))
        sns.heatmap(numeric_cols.corr(), annot=True, cmap='coolwarm', fmt='.2f', ax=ax_corr)
        st.pyplot(fig)
    else:
        st.error("Aucune colonne numÃ©rique disponible pour la corrÃ©lation.")


    if "Channel" in data.columns:
        sales_by_channel = data.groupby("Channel").sum(numeric_only=True).sum(axis=1)
        st.subheader("ğŸ“Š Ventes par canal")
        st.bar_chart(sales_by_channel)
    else:
        st.error("La colonne 'Channel' est introuvable dans les donnÃ©es.")

    st.subheader("ğŸ“Š Ventes par rÃ©gion")
    if "Region" in data.columns:
        sales_by_region = data.groupby("Region").sum(numeric_only=True).sum(axis=1)
        st.bar_chart(sales_by_region)

        regions = ["Tous"] + list(data["Region"].unique())
        selected_region = st.selectbox("SÃ©lectionnez une rÃ©gion", regions)

        if selected_region == "Tous":
            filtered_data = data 
        else:
            filtered_data = data[data["Region"] == selected_region]

        st.subheader(f"ğŸ“Š Ventes dans {selected_region} rÃ©gion")
        st.dataframe(filtered_data)
    else:
        st.error("La colonne 'Region' est introuvable dans les donnÃ©es.")


    

elif menu == 'Recommandations':
    st.subheader("ğŸ“Œ Recommandations basÃ©es sur l'analyse")
    
    st.write("""
    1. **Optimiser l'inventaire pour les prÃ©fÃ©rences des consommateurs** : 
        - **Espresso**, **Latte**, et **Cappuccino** restent les plus populaires. Assurez-vous d'avoir une large offre de ces types de cafÃ©s, en particulier pour la vente en ligne.
        - **Robusta** et **Arabica** peuvent Ãªtre mieux distribuÃ©s dans les magasins physiques, car certains consommateurs prÃ©fÃ¨rent acheter ces cafÃ©s en personne.
    """)
    
    st.write("""
    2. **AccroÃ®tre les ventes en ligne** :
        - Les ventes en ligne sont globalement plus fortes. Il est pertinent d'investir dans l'amÃ©lioration de la plateforme de vente en ligne (expÃ©rience utilisateur, options de paiement, livraison rapide).
        - **Campagnes de fidÃ©lisation en ligne** : DÃ©velopper des programmes de fidÃ©litÃ© ou des promotions ciblÃ©es pour les consommateurs rÃ©guliers d'Espresso, Latte, et Cappuccino.
    """)
    
    st.write("""
    3. **Analyse des horaires de vente** :
        - Identifiez les horaires de forte consommation pour mieux adapter l'approvisionnement et les promotions. Par exemple, des pics de consommation en fin de journÃ©e ou pendant les week-ends peuvent nÃ©cessiter un rÃ©ajustement des stocks.
    """)
    
    st.write("""
    4. **Cibler des segments spÃ©cifiques selon les types de cafÃ©** :
        - **Espresso** et **Latte** peuvent Ãªtre ciblÃ©s pour les jeunes professionnels qui cherchent Ã  acheter rapidement. Les **Cappuccino** et **Lungo** peuvent Ãªtre mis en avant dans des campagnes visant des consommateurs recherchant des moments de dÃ©tente.
        - Proposez des options personnalisÃ©es ou des **packs de dÃ©gustation** pour ceux qui souhaitent explorer diffÃ©rents types de cafÃ©.
    """)
    
    st.write("""
    5. **Suivi des tendances rÃ©gionales** :
        - Bien que la rÃ©gion Sud soit prÃ©dominante dans les donnÃ©es, il serait intÃ©ressant d'explorer la possibilitÃ© d'Ã©tendre les offres dans d'autres rÃ©gions en fonction des tendances locales observÃ©es dans les magasins.
    """)
    
    st.write("""
    6. **Mise en avant des produits populaires dans les magasins physiques** :
        - Pour les magasins physiques, il est judicieux de mettre davantage l'accent sur **Robusta** et **Arabica**, en particulier pour les clients fidÃ¨les aux cafÃ©s plus intenses. Des promotions spÃ©cifiques pourraient Ãªtre envisagÃ©es en fonction de la saisonnalitÃ© ou des prÃ©fÃ©rences locales.
    """)
elif menu == 'GitHub':
    st.subheader("ğŸ”— Lien vers le code source : ")
    st.markdown("https://github.com/votre-utilisateur/votre-repo")
